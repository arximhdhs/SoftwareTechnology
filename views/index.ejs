<!DOCTYPE html>
<html lang="en">
<head>
  <title>CoffeeGuru</title>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
	<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
	<link href="https://fonts.googleapis.com/css?family=Laila" rel="stylesheet">
	<meta name="viewport" content="width=device-width, initial-scale=1">
  <style type="text/css">
/* 		
		.first {
			height: 100px;
		} */
		
		body {
	/*background: pink;*/
	background: url(http://www.rizopoulospost.com/wp-content/uploads/2017/07/1481814525116.jpg) no-repeat fixed;;
	font-family: Laila;
	-webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
}
 
.main-wrapper {
		height: 88vh;  
	  }
	  
	  .section {
		height: 33.33%;  
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
	  }
	  
	  .onethird {
		/* background: #f9f9f9; */
		height: 1000%;  
		width:  33.33%;
		margin: 15px 0;
	  }
	
		footer {
      background-color:rgb(47, 28, 9);
      color: white;
			padding: 2px;
			
			bottom: 0;
        clear: both;
        height: 27px;
        position: fixed;
        width: 100%;
    }
		.colorform{
		background: rgba(47, 28, 9,.8);
	  }
	  h1{
		color: white;  
	  }
		.inscol {
			color:white;  
	  }
	  
		#special{
	color:white;
}
		.navbcolor{
			/* padding: 0.4px; */
			background-color: rgb(47, 28, 9);
			/* color: white; */
		}
		/* ////////////////////////////////////////////////////////////////////// */
		
		/*the container must be positioned relative:*/
.autocomplete {
  position: relative;
  display: inline-block;
}
input {
  border: 1px solid transparent;
  background-color: #f1f1f1;
  padding: 10px;
  font-size: 16px;
}
input[type=text] {
  background-color: #f1f1f1;
  width: 100%;
}
input[type=submit] {
  background-color: DodgerBlue;
  color: #fff;
  cursor: pointer;
}
.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}
.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff; 
  border-bottom: 1px solid #d4d4d4; 
}
/*when hovering an item:*/
.autocomplete-items div:hover {
  background-color: #e9e9e9; 
}
/*when navigating through the items using the arrow keys:*/
.autocomplete-active {
  background-color: DodgerBlue !important; 
  color: #ffffff; 
}
  </style>
</head>
<body>


		<% include ../views/navbar %>





<!-- <a href="www.google.com"></a> -->

		<div class="main-wrapper">
		<div class="section  row-xs-4">
			
		</div>
		<div class="section  row-xs-4">
				<div class="onethird"></div>
				<div class="onethird ">
					<div class="well colorform">
						<h1 class="text-center">Find the best coffee here</h1>
						<form action="/observatory/api/products/searchresults" method="post">
							<div class="form-group"> 
								<label for="exampleInputEmail1 " class="inscol">Type of coffee</label>
								<!-- <form autocomplete="off" action="/action_page.php"> -->
									<div class="autocomplete" style="width:100%;">
										<input class="form-control" id="myInput" type="text" name="category" placeholder="espresso">
									</div>
								<!-- </form> --> 
							</div>
							<div class="form-group">
								<label for="exampleInputPassword1 " class="inscol">Location</label>
								<input type="text" class="form-control" id="exampleInputName2" name="address" placeholder="Παπάγου 23">
							</div>
							
							<div style="text-align:center;">
							<button type="submit" class="btn btn-default">Search</button>
                            </div>
                         
                           
                    </div>  
                        
                        <div class="form-group">
                            <button class="btn  btn-default btn-block colorform" id="special"><a href="/observatory/api/insert" id="special">Insert a product</a></button>
												</div> 
						                   
						</form>
					
				</div>
				<div class="onethird"></div>
			  </div>
			  <div class="section  row-xs-4">
					<div class="onethird"></div>
					<div class="onethird"></div>
					<div class="onethird"></div>
				  </div>
		</div>
		<footer class="container-fluid text-center">
			<p>00101010</p>
		</footer>
		
		
		<script>
			function autocomplete(inp, arr) {
				/*the autocomplete function takes two arguments,
				the text field element and an array of possible autocompleted values:*/
				var currentFocus;
				/*execute a function when someone writes in the text field:*/
				inp.addEventListener("input", function(e) {
						var a, b, i, val = this.value;
						/*close any already open lists of autocompleted values*/
						closeAllLists();
						if (!val) { return false;}
						currentFocus = -1;
						/*create a DIV element that will contain the items (values):*/
						a = document.createElement("DIV");
						a.setAttribute("id", this.id + "autocomplete-list");
						a.setAttribute("class", "autocomplete-items");
						/*append the DIV element as a child of the autocomplete container:*/
						this.parentNode.appendChild(a);
						/*for each item in the array...*/
						for (i = 0; i < arr.length; i++) {
							/*check if the item starts with the same letters as the text field value:*/
							if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
								/*create a DIV element for each matching element:*/
								b = document.createElement("DIV");
								/*make the matching letters bold:*/
								b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
								b.innerHTML += arr[i].substr(val.length);
								/*insert a input field that will hold the current array item's value:*/
								b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
								/*execute a function when someone clicks on the item value (DIV element):*/
								b.addEventListener("click", function(e) {
										/*insert the value for the autocomplete text field:*/
										inp.value = this.getElementsByTagName("input")[0].value;
										/*close the list of autocompleted values,
										(or any other open lists of autocompleted values:*/
										closeAllLists();
								});
								a.appendChild(b);
							}
						}
				});
				/*execute a function presses a key on the keyboard:*/
				inp.addEventListener("keydown", function(e) {
						var x = document.getElementById(this.id + "autocomplete-list");
						if (x) x = x.getElementsByTagName("div");
						if (e.keyCode == 40) {
							/*If the arrow DOWN key is pressed,
							increase the currentFocus variable:*/
							currentFocus++;
							/*and and make the current item more visible:*/
							addActive(x);
						} else if (e.keyCode == 38) { //up
							/*If the arrow UP key is pressed,
							decrease the currentFocus variable:*/
							currentFocus--;
							/*and and make the current item more visible:*/
							addActive(x);
						} else if (e.keyCode == 13) {
							/*If the ENTER key is pressed, prevent the form from being submitted,*/
							e.preventDefault();
							if (currentFocus > -1) {
								/*and simulate a click on the "active" item:*/
								if (x) x[currentFocus].click();
							}
						}
				});
				function addActive(x) {
					/*a function to classify an item as "active":*/
					if (!x) return false;
					/*start by removing the "active" class on all items:*/
					removeActive(x);
					if (currentFocus >= x.length) currentFocus = 0;
					if (currentFocus < 0) currentFocus = (x.length - 1);
					/*add class "autocomplete-active":*/
					x[currentFocus].classList.add("autocomplete-active");
				}
				function removeActive(x) {
					/*a function to remove the "active" class from all autocomplete items:*/
					for (var i = 0; i < x.length; i++) {
						x[i].classList.remove("autocomplete-active");
					}
				}
				function closeAllLists(elmnt) {
					/*close all autocomplete lists in the document,
					except the one passed as an argument:*/
					var x = document.getElementsByClassName("autocomplete-items");
					for (var i = 0; i < x.length; i++) {
						if (elmnt != x[i] && elmnt != inp) {
							x[i].parentNode.removeChild(x[i]);
						}
					}
				}
				/*execute a function when someone clicks in the document:*/
				document.addEventListener("click", function (e) {
						closeAllLists(e.target);
				});
			}
			
			/*An array containing all the country names in the world:*/
			var countries = ["Americano","Latte","Cappuccino","Espresso","Flat White","Long Black","Macchiato","Mochaccino","Irish","Vienna","Affogato","Espresso Freddo","Cappuccino Freddo","Latte Freddo","Greek","French"];

			
			/*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
			autocomplete(document.getElementById("myInput"), countries);
			</script>
</body>
</html>
